from argparse import ArgumentParser
import gzip
import os


def main(indir, outdir, all_kmers):
    # all_kmers = ["k{}".format(i) for i in range(500)]
    filetypes = ["wg.gz", "bed.gz"]
    for filetype in filetypes:
        dict_files = {}
        curpaths = [each for each in os.listdir(indir)
                    if filetype in each]
        for each in curpaths:
            parts = each.split(".")
            cur_kmer = [each2 for each2 in parts if each2 in all_kmers]
            if len(cur_kmer) == 0:
                cur_kmer = ""
            else:
                cur_kmer = cur_kmer[0]
            curlist = dict_files.get(cur_kmer, [])
            curlist.append(os.path.join(indir, each))
            dict_files[cur_kmer] = curlist
        for kmer in all_kmers:
            file_list = dict_files.get(kmer, [])
            if len(file_list) == 0:
                break
            parts = os.path.basename(file_list[0]).split(".")
            use_parts = [each for each in parts
                         if "chr" not in each and each != kmer]
            outpath = os.path.join(
                outdir, ".".join([kmer, "merged"] + use_parts))
            if os.path.exists(outpath):
                raise ValueError("Output exists")
            with gzip.open(outpath, "wb") as outlink:
                file_list.sort()
                for each in file_list:
                    print("Done with {}".format(each))
                    inlink = gzip.open(each, "rb")
                    outlink.write(inlink.read())
                    inlink.close()


if __name__ == "__main__":
    parser = ArgumentParser(
        description="Will merge wg.gz of bed.gz "
        "which are generated by chromosome/kmer size")
    parser.add_argument(
        "indir")
    parser.add_argument(
        "outdir")
    parser.add_argument(
        "--kmers",
        nargs="*",
        default=[],
        help="space-separated list of k-mers; "
        "e.g. k24 k36 k50")
    args = parser.parse_args()
    if len(args.kmers) == 0:
        kmers = [
            "k{}".format(i) for i in range(500)]
    else:
        kmers = args.kmers
    main(args.indir, args.outdir, kmers)
